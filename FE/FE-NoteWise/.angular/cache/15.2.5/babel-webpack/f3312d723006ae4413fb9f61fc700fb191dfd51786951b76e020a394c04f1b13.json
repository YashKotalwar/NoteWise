{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    // baseApiUrl = \"https://file.io\"\n    this.baseApiUrl = \"http://localhost:9090\";\n  }\n  userAuth() {\n    return localStorage.getItem('user');\n  }\n  // Returns an observable\n  upload(file) {\n    // Create form data\n    const formData = new FormData();\n    // Store form name as \"file\" with file data\n    formData.append(\"file\", file, file.name);\n    return this.http.post(`${this.baseApiUrl}/transcription/upload`, formData);\n  }\n  getAllTranscriptList() {\n    return this.http.get(`${this.baseApiUrl}/meetings/all`);\n  }\n  generateNotesByFileName(name) {\n    return this.http.get(`${this.baseApiUrl}/transcription/${name}`);\n  }\n  uploadTranscriptToAWS(file) {\n    return this.http.post(`${this.baseApiUrl}/transcription/upload`, file);\n  }\n  sendMeetingNotes(meetingId) {\n    return this.http.get(`${this.baseApiUrl}/transcription/send/${meetingId}`);\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IAFxB;IACA,eAAU,GAAG,uBAAuB;EACG;EAEvCC,QAAQ;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EACrC;EAEA;EACAC,MAAM,CAACC,IAAS;IAEZ;IACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B;IACAD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,EAAEA,IAAI,CAACI,IAAI,CAAC;IACxC,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC,GAAG,IAAI,CAACC,UAAU,uBAAuB,EAAEL,QAAQ,CAAC;EAC9E;EAEAM,oBAAoB;IAClB,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAM,GAAG,IAAI,CAACF,UAAU,eAAe,CAAC;EAC9D;EAEAG,uBAAuB,CAACL,IAAS;IAC/B,OAAO,IAAI,CAACT,IAAI,CAACa,GAAG,CAAM,GAAG,IAAI,CAACF,UAAU,kBAAkBF,IAAI,EAAE,CAAC;EACvE;EAEAM,qBAAqB,CAACV,IAAS;IAC7B,OAAO,IAAI,CAACL,IAAI,CAACU,IAAI,CAAM,GAAG,IAAI,CAACC,UAAU,uBAAuB,EAAEN,IAAI,CAAC;EAC7E;EAEAW,gBAAgB,CAACC,SAAgB;IAC/B,OAAO,IAAI,CAACjB,IAAI,CAACa,GAAG,CAAM,GAAG,IAAI,CAACF,UAAU,uBAAuBM,SAAS,EAAE,CAAC;EACjF;;AAjCWnB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAFV;AAAM","names":["DataService","constructor","http","userAuth","localStorage","getItem","upload","file","formData","FormData","append","name","post","baseApiUrl","getAllTranscriptList","get","generateNotesByFileName","uploadTranscriptToAWS","sendMeetingNotes","meetingId","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP\\Sec-Pres-Project-Tech\\FrontendPart Spartan\\Technothon (3)\\src\\app\\services\\data.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { MeetingInfo } from '../entity/meetingInfo';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n  // baseApiUrl = \"https://file.io\"\r\n  baseApiUrl = \"http://localhost:9090\";\r\n  constructor(private http:HttpClient) { }\r\n\r\n  userAuth(){\r\n    return localStorage.getItem('user');\r\n  }\r\n\r\n  // Returns an observable\r\n  upload(file:File):Observable<any> {\r\n\r\n      // Create form data\r\n      const formData = new FormData();\r\n      // Store form name as \"file\" with file data\r\n      formData.append(\"file\", file, file.name);\r\n      return this.http.post(`${this.baseApiUrl}/transcription/upload`, formData)\r\n  }\r\n\r\n  getAllTranscriptList(){\r\n    return this.http.get<any>(`${this.baseApiUrl}/meetings/all`);\r\n  }\r\n\r\n  generateNotesByFileName(name: any): Observable<File> {\r\n    return this.http.get<any>(`${this.baseApiUrl}/transcription/${name}`);\r\n  }\r\n\r\n  uploadTranscriptToAWS(file: any): Observable<MeetingInfo>{\r\n    return this.http.post<any>(`${this.baseApiUrl}/transcription/upload`, file);\r\n  }\r\n\r\n  sendMeetingNotes(meetingId:number):Observable<any>{\r\n    return this.http.get<any>(`${this.baseApiUrl}/transcription/send/${meetingId}`);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}